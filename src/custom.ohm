Custom {
  Program       =  Block
  Block         =  Statement+
  Statement     =  (Loop | FunctionCall | Declaration | Assignment | FunctionDeclaration | Exp | Print  | Return) (";")?  --declarative
                | "if" "(" Exp ")" "{" Block "}"
                  ("else" "if" "(" Exp ")" "{" Block "}" )*
                  ("else" "{" Block "}")?                     -- if
  
  Loop 			    = "while" "(" Exp ")" "{" Block* "}" --while
                | "for" "(" Declaration ";" Exp ";" Assignment  ")" "{" Block* "}"  --for
  FunctionCall  =  id "(" Args ")"
  Declaration   =  type Assignment
  Assignment    = id "=" Exp						                      -- assign
                | id "++"							                        -- increment
                | id "--"								                      -- decrement
  FunctionDeclaration =  type id "(" ListOf<Param, ","> ")" "{" Block* "}"

  Args          =  ListOf<BinExp, ",">
  Param         =  type id 

  Exp           =  Exp relop BinExp                           -- binary
                |  BinExp "?" BinExp ":" BinExp               -- ternary
                |  BinExp
  BinExp        =  BinExp binop AddExp                        -- binary
                |  AddExp
  AddExp        =  AddExp addop MullExp                       -- binary
                |  MullExp
  MullExp       =  MullExp mullop PrefixExp                   -- binary
                |  PrefixExp
  PrefixExp     =  prefixop ExpoExp                           -- binary
                |  ExpoExp
  ExpoExp       =  ParenExp expop ExpoExp                     -- binary
                |  ParenExp
  ParenExp      =  "(" Exp ")"                                -- parens
                |  Array
                |  numlit
                |  stringlit
                | id
  
  Print         =  "print" "(" Exp ")"
  Return        =  "return" ParenExp
  Array          =  "[" (BinExp ("," BinExp)*)? "]"

  type          =  "string" | "int" | "bool" | "char" | "float"
  keyword       =  type | "if" | "else" | "return" | "print"
  id            =  keyword alnum+ --keywordPlus
                | ~keyword letter (alnum)* --noKeyword
  prefixop      =  "!" | "-"
  relop         =  ">" | ">=" | "==" | "!=" | "<" | "<="
  addop         =  "+" | "-" 
  mullop        =  "*" | "/" | "%"
  expop         =  "^"
  binop         =  "||" | "or" | "&&" | "and"
  numlit        =  digit+ ("." digit+)?
  stringlit     =  "\"" (char | "\'")* "\""
                | "\'" (char | "\"")* "\'"
  char          =  escape
                |  ~"\\" ~"\"" ~"\'" ~"\\n" any
  escape        = "\\\\" | "\\\"" | "\\'" | "\\n" | "\\t"
                |  "\\u{" hexDigit+ "}"                       -- codepoint
  space         := " " | "\t" | "\n" | comment
  comment       =  "//" (~"\n" any)*                          --singleline
                | "/*" (~("*/") any )* "*/"                   --multiline
}